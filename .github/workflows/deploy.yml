name: Deploy Laravel to Docker Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Connect to VPS and Clone or Pull Repo
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            PROJECT_PATH="/var/www/mld/mldbackend"
            if [ -d "$PROJECT_PATH/.git" ]; then
              cd $PROJECT_PATH
              git pull origin main
            else
              rm -rf $PROJECT_PATH
              git clone -b main https://github.com/usernem/mldbackend.git $PROJECT_PATH
            fi

      - name: Setup .env if not exists
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /var/www/mld/mldbackend
            if [ ! -f .env ]; then
              cp .env.example .env
              sed -i "s|APP_KEY=.*|APP_KEY=${{ secrets.APP_KEY }}|" .env
              sed -i "s|DB_HOST=.*|DB_HOST=global_mysql|" .env
              sed -i "s|DB_PASSWORD=.*|DB_PASSWORD=${{ secrets.DB_PASSWORD }}|" .env
              sed -i '/^DB_PASSWORD=/p; s/^DB_PASSWORD=/DB_ROOT_PASSWORD=/' .env
              sed -i "s|APP_DEBUG=.*|APP_DEBUG=false|" .env
            fi

      - name: Build Docker Services
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /var/www/mld/mldbackend
            docker compose up -d --build

      - name: Wait for Laravel container to start
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            echo "Waiting for mldbackend container..."
            max_retries=15
            count=0
            until docker ps | grep mldbackend | grep "Up"; do
              count=$((count+1))
              [ $count -eq $max_retries ] && echo "Container failed to start." && docker logs mldbackend && exit 1
              echo "Waiting... ($count/$max_retries)"
              sleep 5
            done

      - name: Create Database if Not Exists
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            docker exec -i global_mysql mysql -u root -p${{ secrets.DB_PASSWORD }} -e "CREATE DATABASE IF NOT EXISTS mldbackend;"

      - name: Generate Laravel App Key
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /var/www/mld/mldbackend
            docker compose exec -T mldbackend php artisan key:generate

      - name: Run Migrations
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /var/www/mld/mldbackend
            docker compose exec -T mldbackend php artisan migrate --force

      - name: Create Storage Symlink
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /var/www/mld/mldbackend
            docker compose exec -T mldbackend php artisan storage:link

      - name: Clear Laravel Cache
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /var/www/mld/mldbackend
            docker compose exec -T mldbackend php artisan optimize:clear
            docker compose exec -T mldbackend php artisan config:cache
